:: _Add All Text Manipulation
{embed passage: '_Add Capitalization Insert'}
{embed passage: '_Add Text Collection Modifier and Insert'}
{embed passage: '_Add Conditional Insert'}
{embed passage: '_Add One Of and First Time Inserts and Modifiers'}



:: _Add Capitalization Insert
[Javascript]
engine.extend('2.0.0', () => {
    engine.template.inserts.add({
        name: "^ ",
        description: "Print the contents of a variable, capitalizing it.",
        match: /^\^\s+\S+$/i,
        render(firstArg, props, invocation) {
            const variableToShow = invocation?.slice(1).trimStart();
            const valueToShow = engine.state.get(variableToShow);
            if (!valueToShow) {
                return `{${invocation}}`;
            }
            return valueToShow.slice(0, 1).toLocaleUpperCase() + valueToShow.slice(1);
        }
    });
});



:: _Add Text Collection Modifier and Insert
[Javascript]
engine.state.set('__collected', '');
engine.extend('2.0.0', () => {
    engine.template.modifiers.add({
        name: "collect",
        description: "Collect the text in the modifier for later display.",
    	match: /^collect\b/i,
        process(output, {state, invocation}) {
            const modifier = invocation?.slice(7).trimStart().replace(/\s.*/, '').toLowerCase() || '';
            if (config.testing && !(modifier === '' || modifier === 'new' || modifier === 'no-space' || modifier === 'new-paragraph')) {
                console.warn(
                    `"collect" modifier can only be [collect], [collect new], [collect no-space], or [collect new-paragraph], but was called as [${invocation}]`
                );

            }
            // Only perform collection if there's any text. That
            // prevents weirdness from an [if ...; collect] block.
            if (output.text != '') {
                if (modifier === 'new') {
                    __collected = '';
                }
                else {
                    __collected = __collected.trimEnd();
                    if (modifier === 'new-paragraph') {
                        __collected += '\n\n';
                    }
                    else if (modifier !== 'no-space' && __collected !== '') {
                        __collected += ' ';
                    }
                }
                __collected += output.text.trimStart();
                output.text = '';
            }
        }
    });
});

[Javascript]
engine.extend('2.0.0', () => {
    engine.template.inserts.add({
        name: "show collected",
        description: "Show all text collected in previous [collect] modifiers.",
    	match: /^show\s+collected/i,
    	render: (first_arg, props, invocation) => {
        	if (typeof(__collected) === undefined) {
                if (config.testing) {
                	throw new Error('{show collected} called before any text was collected');
                }
            }
        	const output = __collected;
            if (!props['keep']) {
            	__collected = '';
            }
            return output;
	    }
    })
});



:: _Add Conditional Insert
[Javascript]
engine.extend('2.0.0', () => {
    engine.template.inserts.add({
        name: "if",
        description: "Show text if the contents of a variable evaluates to true.",
    	match: /^if\s+[^:,]/i,
        render: (first_arg, props, invocation) => {
            const condition = invocation.split(':')[0].slice(3);
            const value = new Function(`return ${condition};`)();
            return ((value) ? first_arg : props['else']) || '';
        }
    });
});



:: _Add One Of and First Time Inserts and Modifiers
[Javascript]
engine.state.set('zOneOfTracking', {});
libfunc = {};
libfunc.randInt = (max) => {
    return Math.floor(Math.random() * max);  // Random int from 0 to max-1
}
libfunc.shuffleArray = (arr) => {
    for (let i = arr.length - 1; i > 0; --i) {
        const j = libfunc.randInt(i + 1);
        [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr;
}
libfunc.embarassinglySimpleHashCode = (s) => {
    let hash = 0;
    for (let i = 0; i < s.length; ++i) {
        let chr = s.charCodeAt(i);
        hash = (hash << 5) - hash + chr;
        hash |= 0;
    }
    return hash;
}
libfunc.hashInvocation = (invocation) => {
    //return passage.name + invocation;
    return libfunc.embarassinglySimpleHashCode(passage.name + invocation).toString();
}
engine.extend('2.0.0', () => {
    engine.template.inserts.add({
        name: "first time",
        description: "Show text only the first time the insert is viewed.",
        match: /^first\s+time\b/i,
        render: (to_print, props, invocation) => {
            const hash = libfunc.hashInvocation(invocation);
            if (zOneOfTracking[hash] === undefined) {
                zOneOfTracking[hash] = true;
                return to_print;
            }
        }
    });

    engine.template.modifiers.add({
        name: "first time",
        description: "Show modified text only the first time the passage is viewed.",
        match: /^first\s+time\b/i,
        process(output, {invocation, state}) {
            const hash = libfunc.hashInvocation(invocation);
            if (zOneOfTracking[hash] === undefined) {
                zOneOfTracking[hash] = true;
            } else {
                output.text = '';
                output.startsNewParagraph = false;
            }
        }
    });
});

[Javascript]
engine.extend('2.0.0', () => {
    engine.template.inserts.add({
        name: "one of",
        description: "Display varying text every time the player encounters this insert.",
        match: /^one\s+of\b/i,
        render(choices, props, invocation) {
            const hash = libfunc.hashInvocation(invocation);
            let prev = zOneOfTracking[hash];
            let ret;
            const order = (props.order || '').toLowerCase();
            if (order === 'random' || order === '') {
                let choice = prev;
                while (choice == prev) {
                    choice = libfunc.randInt(choices.length);
                }
                zOneOfTracking[hash] = choice;
                ret = choices[choice];
            }
            else if (order === 'pure random') {
                ret = choices[libfunc.randInt(choices.length)];
            }
            else if (order === 'shuffled') {
                if (prev === undefined || prev.length == 0) {
                    prev = libfunc.shuffleArray([...choices]);
                }
                ret = prev.pop();
                zOneOfTracking[hash] = prev;
            }
            else if (order === 'stopping' || order === 'cycling') {
                if (prev === undefined) {
                    prev = 0;
                }
                else {
                    prev++;
                    if (prev >= choices.length) {
                        prev = (order === 'stopping') ? choices.length - 1 : 0;
                    }
                }
                zOneOfTracking[hash] = prev;
                ret = choices[prev];
            }
            else {
                if (config.testing) {
                    throw new Error(
                        `The {one of} order was "${order}" but must be one of "random", "pure random", "shuffled", "stopping", or "cycling"`
                    );
                }
                ret = invocation;
            }
            return ret;
        }
    });
});
